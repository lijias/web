一.类型判别函数库
 1.安装:类型判别函数库是PHPCORE的组成部分,不用安装
 2.
  (1)is_integer|is_int|is_long
     描述：  检测变量是否是整数
     格式：bool is_int ( mixed $var )
  (2)is_float|is_double|is_real
     描述：  检测变量是否是浮点
  (3)is_bool
     描述：  检测变量是否是布尔值
  (4)is_string
     描述：  检测变量是否是字符型
  (5)is_array
     描述：  检测变量是否是数组
  (6)is_object
     描述：  检测变量是否是对象
  (7)is_null
     描述：  检测变量是否是NULL
  (8)is_resource
     描述：  检测变量是否是资源 
  (9)is_numeric
     描述：  检测变量是否是数值(整数，浮点,合法的数值字符串) 
  (10)is_scalar
     描述：  检测变量是否是标量(整数，浮点,布尔,字符串)
     
二.运算符(Operator)
 1.运算符：程序执行的运算符号,要求必须有一个以上的
                    操作数参加运算
                    表达式:由运算符和操作数组成(例如 $a +$b)
 2.运算符分类
   (1)按功能分
   (2)按参加操作数的个数分
 3.按功能分
   (1)算术运算符
   (2)字符(连接)运算符
   (3)赋值运算符
   (4)比较运算符
   (5)逻辑运算符
   (6)错误抑制符
   (7)执行运算符
 4.算术运算符:正号(+) 负号(-)  + - * /
            %(取余数) ++( 自增,递增)  
            --( 自减,递减)

   (1)%(取余数)
      a.算术运算符求的是整数余数,向下取整
      b.取余数运算符号与被除数一致
      c.fmod 实现求浮点数的余数
   (2)++( 自增,递增),--( 自减,递减)
      a. ++$var $var++ --$var $var--
      b. 前缀形式:变量先自身加1或减1，后执行语句
                   后缀形式:先执行语句,变量后自身加1或减1
      c.判断类型是否支持自增自减
        (a)数值型支持自增自减
        (b)布尔值不支持自增自减
        (c)null支持自增不支持自减
        (d)字符型支持自增不支持自减
       说明:
             算术运算符的结果是数值类型
             算术运算符运算前转为数值类型
   
 5.字符(连接)运算符：(符号: .)
      说明:字符(连接)运算符结果字符类型
 6.赋值运算符: =,+= -= *= /= %= .=
      说明:赋值运算符结果与运算符有关
 7.比较运算符: > >= < <= 
             ==(等于) 
             != <>(不等于)
             ===(全等于) !==(不全等于)
     说明:
     a.比较运算符结果是布尔类型
     b. ===(全等于) :值和数据类型都相等true,
                                          否则是false
     c.!==(不全等于):值和数据类型都相等false,
                                          否则是true
     d. 比较运算符类型转换问题
        (a)字符串或null 跟字符串的比较
           null 转为空字符串，按数值比较和单词
                       比较，如果是数值和字母比较按ASCII
                       码比较
        (b)布尔值或null跟其他类型按布尔值比较
           true > false
        (c)数值或字符串跟数值按数值比较
     e.===(全等于) 和!==(不全等于)严格比较的使用
             原理:PHP是弱类型语言 ,根据程序运行环境
            自动转换，比如 0,0.0 '0'"0"会自动转换为
      false,为了避免自动转换产生的错误，要有
      ===(全等于) 和!==(不全等于)解决
     
     
     
     
     
     
     
     
     
     
     
     
     
   
   




  
 



